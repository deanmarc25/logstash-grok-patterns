input {
  tcp {
    codec => "plain"
    mode => server
    port => 5000
    type => "syslog-relay"
  }
}

filter {
  ### parse syslog prio / facility
  syslog_pri {
  }
  
  mutate {
    add_tag => [ "syslog_parsefailure", "syslog_message_unparsed" ]
  }

  ### get the rest of the syslog fields, whichever format they may be in
  grok {
    match => [ "message", "%{SYSLOG5424PRI}%{CISCOTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_host}/%{IPORHOST:syslog_relayhost} %{SYSLOGPROG}: %{GREEDYDATA:syslog_message}" ]
    add_field => { "syslog_fullhost" => "%{syslog_host} (%{syslog_relayhost})" }
    add_tag => [ "syslog_relay" ]
    remove_tag => [ "syslog_parsefailure" ]
    tag_on_failure => [ ]
  }

  ### syslog "message repeated N times" lines
  grok {
    match => [ "message", "%{SYSLOG5424PRI}%{CISCOTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_host}/%{IPORHOST:syslog_relayhost} last message repeated %{NUMBER:syslog_repeats} times" ]
    add_field => { "syslog_fullhost" => "%{syslog_host} (%{syslog_relayhost})" }
    add_field => { "syslog_message" => "last message repeated %{syslog_repeats} times" }
    add_tag => [ "syslog_repeats" ]
    remove_tag => [ "syslog_parsefailure", "syslog_message_unparsed" ]
    tag_on_failure => [ ]
  }

  ### syslog-ng stats lines
  grok {
    match => [ "message", "%{SYSLOG5424PRI}%{CISCOTIMESTAMP:syslog_timestamp} %{WORD:syslog_source}@%{IPORHOST:syslog_host} %{SYSLOGPROG}: %{GREEDYDATA:syslog_message}" ]
    add_field => { "syslog_relayhost" => "%{syslog_host}" }
    add_field => { "syslog_fullhost" => "%{syslog_host} (%{syslog_relayhost})" }
    add_tag => [ "syslog_stats" ]
    remove_tag => [ "syslog_parsefailure", "syslog_message_unparsed" ]
    tag_on_failure => [ ]
  }

####################################################################################################

  if [program] == "postgres" {
    mutate {
      add_tag => [ "postgres_log" ]
    }

    grok {
      pattern => "\[%{POSINT:postgres_streamid}-%{POSINT:postgres_linenumber}\]"
    }

    mutate {
      convert => [
        "postgres_streamid", "integer",
        "postgres_linenumber", "integer"
      ]
    }

    if [postgres_linenumber] > 1 {
      mutate {
        add_tag => [ "postgres_multiline" ]
        remove_tag => [ "syslog_message_unparsed" ]
      }
      #multiline {
      #  what => "previous"
      #  pattern => "^\["
      #  stream_identity => "\[%{postgres_streamid}"
      #}
    } else {
      grok {
        patterns_dir => "/usr/local/etc/logstash/patterns/postgresql"
        match => [ "syslog_message", "%{POSTGRES}" ]
        remove_tag => [ "syslog_message_unparsed" ]
      }
    }
  }

####################################################################################################

  ### parse nginx logs
  if [program] == "nginx" {
    mutate {
      add_tag => [ "nginx_log" ]
    }
    grok {
      patterns_dir => "/usr/local/etc/logstash/patterns/nginx"
      match => [ "syslog_message", "%{NGINX_PROXYLOG}" ]
      add_tag => [ "nginx_proxylog" ]
      remove_tag => [ "syslog_message_unparsed" ]
      tag_on_failure => [ ]
    }
    grok {
      patterns_dir => "/usr/local/etc/logstash/patterns/nginx"
      match => [ "syslog_message", "%{NGINX_ACCESSLOG}" ]
      add_tag => [ "nginx_accesslog" ]
      remove_tag => [ "syslog_message_unparsed" ]
      tag_on_failure => [ ]
    }
    grok {
      patterns_dir => "/usr/local/etc/logstash/patterns/nginx"
      match => [ "syslog_message", "%{NGINX_POSTDATA}" ]
      add_tag => [ "nginx_postdata" ]
      remove_tag => [ "syslog_message_unparsed" ]
      tag_on_failure => [ ]
    }
  }

####################################################################################################

  if [program] =~ /^postfix\// {
    mutate {
      add_tag        => [ "postfix_log" ]
    }
    # grok log lines by program name (listed alpabetically)
    if [program] =~ /^postfix.*\/anvil$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_ANVIL}" ]
            tag_on_failure => [ "_grok_postfix_anvil_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/bounce$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_BOUNCE}" ]
            tag_on_failure => [ "_grok_postfix_bounce_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/cleanup$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_CLEANUP}" ]
            tag_on_failure => [ "_grok_postfix_cleanup_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/dnsblog$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_DNSBLOG}" ]
            tag_on_failure => [ "_grok_postfix_dnsblog_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/lmtp$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_LMTP}" ]
            tag_on_failure => [ "_grok_postfix_lmtp_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/local$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_LOCAL}" ]
            tag_on_failure => [ "_grok_postfix_local_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/master$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_MASTER}" ]
            tag_on_failure => [ "_grok_postfix_master_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/pickup$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_PICKUP}" ]
            tag_on_failure => [ "_grok_postfix_pickup_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/pipe$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_PIPE}" ]
            tag_on_failure => [ "_grok_postfix_pipe_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/postdrop$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_POSTDROP}" ]
            tag_on_failure => [ "_grok_postfix_postdrop_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/postscreen$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_POSTSCREEN}" ]
            remove_tag => [ "syslog_message_unparsed" ]
            tag_on_failure => [ "_grok_postfix_postscreen_nomatch" ]
        }
    } else if [program] =~ /^postfix.*\/qmgr$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_QMGR}" ]
            tag_on_failure => [ "_grok_postfix_qmgr_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/sendmail$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_SENDMAIL}" ]
            tag_on_failure => [ "_grok_postfix_sendmail_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/smtp$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_SMTP}" ]
            tag_on_failure => [ "_grok_postfix_smtp_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/smtpd$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_SMTPD}" ]
            tag_on_failure => [ "_grok_postfix_smtpd_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/tlsmgr$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_TLSMGR}" ]
            tag_on_failure => [ "_grok_postfix_tlsmgr_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/tlsproxy$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_TLSPROXY}" ]
            tag_on_failure => [ "_grok_postfix_tlsproxy_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    } else if [program] =~ /^postfix.*\/trivial-rewrite$/ {
        grok {
            patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
            match          => [ "syslog_message", "%{POSTFIX_TRIVIAL_REWRITE}" ]
            tag_on_failure => [ "_grok_postfix_trivial_rewrite_nomatch" ]
            remove_tag => [ "syslog_message_unparsed" ]
        }
    }

    # process key-value data is it exists
    if [postfix_keyvalue_data] {
        kv {
            source       => "postfix_keyvalue_data"
            trim         => "<>,"
            prefix       => "postfix_"
            remove_field => [ "postfix_keyvalue_data" ]
        }

        # some post processing of key-value data
        if [postfix_client] {
            grok {
                patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
                match          => ["postfix_client", "%{POSTFIX_CLIENT_INFO}"]
                tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
                remove_field   => [ "postfix_client" ]
            }
        }
        if [postfix_relay] and [program] != "postfix/lmtp" {
            grok {
                patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
                match          => ["postfix_relay", "%{POSTFIX_RELAY_INFO}"]
                tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
                remove_field   => [ "postfix_relay" ]
            }
        }
        if [postfix_delays] {
            grok {
                patterns_dir   => "/usr/local/etc/logstash/patterns/postfix"
                match          => ["postfix_delays", "%{POSTFIX_DELAYS}"]
                tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
                remove_field   => [ "postfix_delays" ]
            }
        }
    }

    # Do some data type conversions
    mutate {
        convert => [
            # list of integer fields
            "postfix_anvil_cache_size", "integer",
            "postfix_anvil_conn_count", "integer",
            "postfix_anvil_conn_rate", "integer",
            "postfix_client_port", "integer",
            "postfix_nrcpt", "integer",
            "postfix_postscreen_cache_dropped", "integer",
            "postfix_postscreen_cache_retained", "integer",
            "postfix_postscreen_dnsbl_rank", "integer",
            "postfix_relay_port", "integer",
            "postfix_server_port", "integer",
            "postfix_size", "integer",
            "postfix_status_code", "integer",
            "postfix_termination_signal", "integer",
            "postfix_uid", "integer",

            # list of float fields
            "postfix_delay", "float",
            "postfix_delay_before_qmgr", "float",
            "postfix_delay_conn_setup", "float",
            "postfix_delay_in_qmgr", "float",
            "postfix_delay_transmission", "float",
            "postfix_postscreen_violation_time", "float"
        ]
    }
  } # end of postfix rules

####################################################################################################

  if [program] == "dovecot" {
    mutate {
      add_tag => [ "dovecot_log" ]
    }
    kv {
      source => "syslog_message"
      trim => ","
      include_keys => [ "box", "from", "in", "lip", "method", "mpid", "msgid", "out", "rip", "session", "size", "user" ] 
      target => "dovecot"
      remove_tag => [ "syslog_message_unparsed" ]
    }
    grok {
      match => [ "syslog_message", "lmtp\(%{NUMBER:dovecot_pid}\):%{SPACE}%{GREEDYDATA:dovecot_message}" ]
      remove_tag => [ "syslog_message_unparsed" ]
    }
  }

####################################################################################################

  if [program] == "sendmail" {
    mutate {
      add_tag => [ "sendmail_log" ]
    }
    grok {
      patterns_dir => "/usr/local/etc/logstash/patterns/sendmail"
      match => [ "syslog_message", "%{SENDMAIL}" ]
      remove_tag => [ "syslog_message_unparsed" ]
    }
  }

####################################################################################################

  if [program] == "/usr/sbin/cron" {
    mutate {
      add_tag => [ "cron_log" ]
    }
    grok {
      match => [ "syslog_message", "\(%{WORD:cron_username}\) CMD \(%{GREEDYDATA:cron_command}\)" ]
      remove_tag => [ "syslog_message_unparsed" ]
    }
  }

####################################################################################################

} # end of filter{}

####################################################################################################

output {
	elasticsearch { 
		embedded => true
		host => "syslog.tyktech.dk"
	}
	stdout {
		codec => "rubydebug"
	}
}

